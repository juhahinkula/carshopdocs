{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"General Car Shop REST API Documentation The Car Shop API is a RESTful web service designed to manage the car stock of a car shop. It provides the ability to create, read, update, and delete (CRUD) car records in the car shop's database. Overview: The API is structured around one main resource: Cars The car table in the backend database contains the following fields: id : A unique identifier for each car (integer). brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). Base URL https://carrestservice-carshop.rahtiapp.fi/ Reset Database To reset database you can use the following request that deletes all data from the database and re-populate it with the original demo data. POST https://carrestservice-carshop.rahtiapp.fi/reset Response: Upon successful reset, the API will return a 200 OK status code and the response body contains text: DB reset done . If the reset operation fails for any reason, the API will return an appropriate error status code and message.","title":"General"},{"location":"#general","text":"","title":"General"},{"location":"#car-shop-rest-api-documentation","text":"The Car Shop API is a RESTful web service designed to manage the car stock of a car shop. It provides the ability to create, read, update, and delete (CRUD) car records in the car shop's database. Overview: The API is structured around one main resource: Cars The car table in the backend database contains the following fields: id : A unique identifier for each car (integer). brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number).","title":"Car Shop REST API Documentation"},{"location":"#base-url","text":"https://carrestservice-carshop.rahtiapp.fi/","title":"Base URL"},{"location":"#reset-database","text":"To reset database you can use the following request that deletes all data from the database and re-populate it with the original demo data. POST https://carrestservice-carshop.rahtiapp.fi/reset Response: Upon successful reset, the API will return a 200 OK status code and the response body contains text: DB reset done . If the reset operation fails for any reason, the API will return an appropriate error status code and message.","title":"Reset Database"},{"location":"cars/","text":"Cars Base URL https://carrestservice-carshop.rahtiapp.fi/ Endpoints Get All Cars To retrieve all cars , you can use the GET /cars endpoint. Request: No parameters are required for this endpoint. Response: The response is a JSON object with a _embedded field containing an array of cars. Each car object includes the following fields: brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). _links : A set of links related to the customer. Each link object includes: self : A link to the car's own information. (string) car : A link to the car's information. (string) Example Response { \"_embedded\" : { \"cars\" : [ { \"brand\" : \"Volvo\", \"model\" : \"XC60\", \"color\" : \"Black\", \"fuel\" : \"E95\", \"modelYear\" : 2023, \"price\" : 59000, \"_links\" : { \"self\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8041\" }, \"car\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8041\" } } }, { \"brand\" : \"Nissan\", \"model\" : \"X-Trail\", \"color\" : \"Silver\", \"fuel\" : \"Diesel\", \"modelYear\" : 2012, \"price\" : 19000, \"_links\" : { \"self\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8042\" }, \"car\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8042\" } } } } Get Car by Id To retrieve a specific car's details, you can use the GET /cars/{id} endpoint, where {id} is the unique identifier of the car. Request: The request does not require a request body, only the car's id as a path parameter. Path Parameters: id (required): The unique identifier of the car. This is an integer. Example Request: GET /cars/123 Create New Car To create a new car you can use POST /cars endpoint. Request: This endpoint requires a JSON object in the request body with the following fields: brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). Headers: 'Content-Type': 'application/json' . Example Request: POST /cars Content-Type: application/json { \"brand\": \"BWM\", \"model\": \"3\", \"color\": \"Red\", \"fuel\": \"Hybrid\", \"year\": \"2024\", \"price\": \"48000\" } Update Car To update a specific car's details, you can use the PUT /cars/{id} endpoint, where {id} is the unique identifier of the car. Request: The request requires the car's id as a path parameter and the updated car details in the request body as a JSON string. Headers: Content-Type: 'application/json' Path Parameters: id (required): The unique identifier of the car. This is an integer. Request Body: The request body should be a JSON object containing the updated car details. All fields are optional, and only the provided fields will be updated. brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). Example Request: PUT /cars/123 Content-Type: application/json { \"brand\": \"BWM\", \"model\": \"3\", \"color\": \"White\", \"fuel\": \"Hybrid\", \"year\": \"2024\", \"price\": \"48000\" } Delete Car To delete a specific car, you can use the DELETE /cars/{id} endpoint, where {id} is the unique identifier of the car. Request: The request does not require a request body, only the car's id as a path parameter. Path Parameters: id (required): The unique identifier of the car. This is an integer. Response: Upon successful deletion, the API will return a 204 No Content status code. If the car with the provided id does not exist, the API will return a 404 Not Found status code.","title":"Cars"},{"location":"cars/#cars","text":"","title":"Cars"},{"location":"cars/#base-url","text":"https://carrestservice-carshop.rahtiapp.fi/","title":"Base URL"},{"location":"cars/#endpoints","text":"","title":"Endpoints"},{"location":"cars/#get-all-cars","text":"To retrieve all cars , you can use the GET /cars endpoint. Request: No parameters are required for this endpoint. Response: The response is a JSON object with a _embedded field containing an array of cars. Each car object includes the following fields: brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). _links : A set of links related to the customer. Each link object includes: self : A link to the car's own information. (string) car : A link to the car's information. (string) Example Response { \"_embedded\" : { \"cars\" : [ { \"brand\" : \"Volvo\", \"model\" : \"XC60\", \"color\" : \"Black\", \"fuel\" : \"E95\", \"modelYear\" : 2023, \"price\" : 59000, \"_links\" : { \"self\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8041\" }, \"car\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8041\" } } }, { \"brand\" : \"Nissan\", \"model\" : \"X-Trail\", \"color\" : \"Silver\", \"fuel\" : \"Diesel\", \"modelYear\" : 2012, \"price\" : 19000, \"_links\" : { \"self\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8042\" }, \"car\" : { \"href\" : \"https://carrestservice-carshop.rahtiapp.fi/cars/8042\" } } } }","title":"Get All Cars"},{"location":"cars/#get-car-by-id","text":"To retrieve a specific car's details, you can use the GET /cars/{id} endpoint, where {id} is the unique identifier of the car. Request: The request does not require a request body, only the car's id as a path parameter. Path Parameters: id (required): The unique identifier of the car. This is an integer. Example Request: GET /cars/123","title":"Get Car by Id"},{"location":"cars/#create-new-car","text":"To create a new car you can use POST /cars endpoint. Request: This endpoint requires a JSON object in the request body with the following fields: brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). Headers: 'Content-Type': 'application/json' . Example Request: POST /cars Content-Type: application/json { \"brand\": \"BWM\", \"model\": \"3\", \"color\": \"Red\", \"fuel\": \"Hybrid\", \"year\": \"2024\", \"price\": \"48000\" }","title":"Create New Car"},{"location":"cars/#update-car","text":"To update a specific car's details, you can use the PUT /cars/{id} endpoint, where {id} is the unique identifier of the car. Request: The request requires the car's id as a path parameter and the updated car details in the request body as a JSON string. Headers: Content-Type: 'application/json' Path Parameters: id (required): The unique identifier of the car. This is an integer. Request Body: The request body should be a JSON object containing the updated car details. All fields are optional, and only the provided fields will be updated. brand : The manufacturer of the car (string). model : The model of the car (string). color : The color of the car (string). fuel : The fuel type of the car (string). modelYear : The year the car was manufactured (integer). price : The price of the car (number). Example Request: PUT /cars/123 Content-Type: application/json { \"brand\": \"BWM\", \"model\": \"3\", \"color\": \"White\", \"fuel\": \"Hybrid\", \"year\": \"2024\", \"price\": \"48000\" }","title":"Update Car"},{"location":"cars/#delete-car","text":"To delete a specific car, you can use the DELETE /cars/{id} endpoint, where {id} is the unique identifier of the car. Request: The request does not require a request body, only the car's id as a path parameter. Path Parameters: id (required): The unique identifier of the car. This is an integer. Response: Upon successful deletion, the API will return a 204 No Content status code. If the car with the provided id does not exist, the API will return a 404 Not Found status code.","title":"Delete Car"}]}